Dar o: npx create-react-app <nome da aplicação> --template typescript

2:Removendo arquivos desnecessários: remover comentários do index.html, a tag <noscript> avisa ao usuário ligar o JS no navegador

3: Em package.json  criar devDependencies e transferir @testing ,@types, react-scripts e typescript de Dependencies pra devDependencies fazemos isso pra separar dependencias de produçao e dependencias de desenvolvimento

4:Remover: app.css, ap.teste.tsx, index.css, logo.svg, em seguida excluir os imports dos arquivos deletados

5:EM App.tsx substituir function app por uma arrow Function e apagar o export App. No index.tsx apagar o import app e na tag App dar um Ctrl + space ele irá sujerir o novo local import

6: Criar dentro de src a pasta app depois jogar o arquivo App.tsx dentro dela, em seguida criar pasta pages e a pasta routes e pasta shared dentro de app.

7: dentro da pasta shared tera todos os arquivos compartilhados da aplicação, sendo assim crio dentro dela: components, contexts, hooks, services. e dentro de cada uma delas eu crio um index.ts com um export vazio dentro. export {}. 
OBS: na pasta routs criar index.tsx

8: instalar o paaocte de tipagem react-router-dom:
npm i -D @types/react-router-dom

9: Dentro de index.tsx importar BrowserRouter, Routes , Route, Navigator

10:no return apliar <BrowserRouter> <Router> e <Route path="/" element={}> com a rota desejada. como teste criei um <h1>teste</h1> pra ver o retorno importando a função <Rts/>

11: criei uma pasta dashboard dentro de pages e um arquivo Dashboard.tsx dentro dela, adicionei uma função com export com um <p> dentro depois em index.tsx add esse componete na Route "/home"

12: Em index.tsx adicionei o modulo Navigate, depois chamei  pra caso uma rota inexistente seja chamada ele redirecione  pra página home : <Route path='*' element={<Navigate to="/home"/>}/>

13: Criamos uma pasta login em pages com o Login.tsx dentro crimaos um componente e exportamos no index.tsx da pasta pages, depois crimaos uma rota /login em index.txs da pasta routes

14: Em Dashboard.tsx importamos o modulo Link e chamamos o modulo com a rota /login pra ter um Link na tela pra direcionar

15 outra forma seria usando o useNavigate, em Login.tsx. Basta importar ele e estanciar em uma const "navigate",  em seguida criar uma função com "navigate('/rota')" e depois chamar a função no evento onclick={} do button

16: Em Login depois de apagar os exemplos da aula anterior, criamos tags <form> <label> <span> <input> pr email e password e o <button>
depois criamos função pra ser chamada no evento onClick do button

17: importamos o modulo useState() e  criamos um state email e passamos esse state no input do email pra capturar os valores, depois com o evento onClick pegamos executamos a função handleEnter

8: Aplico a mesma logica com o uso de state pra o password 

9:Aplicamos o useEffect({},[]) pra impedir que o bloco de codigo dentro dele seja carregado mais de uma vez. passar array como segundo parâmetro que serve pra renderizar o valor a medida que é passado

10:criei uma tag <p>com  a quantidae de caracteres de email com {email.length}. depois importamos o useMemo(()=>{},[]) que é obrigatorio ter dois parâmetros  no caso uma função e um array.
a função retora o calculo no caso o satate email.length * 10 e no array a propria dependencia email.length.
OBS: só passar a dependencia pra segundo parâmetro que estiver no return da function

11: Aplicando o useCallback na função handleEnter passando os log que retornarão no console mas inserindo o segundo parãmetro no arrays de dependencias que é o email, password pois ambos estão no contexto na função. OBS: caso haja states no callback é crucial passar as depêndecias no array do segundo parâmetro

11: useRef não precisa de array de dependencia, crio uma estância com useRef<HTMLInputElement>(null) depois jogo essa vonst como ref={} no <input> ou seja useRef serve pra pegar a referencia do nosso html e usar dentro de um callBack ou uma função, No campo INput email add onKeyDown={e => e.key ==='Enter' ? inputPasswordRef.current?.focus() : undefined} pra pular pro campo senha quando der Enter

12: Em Dashboard.tsx importamos o useRef e criamos uma const ccounteRef = useRef({countet: 0}) dessa vez com um objeto ao invers de null sem um parãmetro de tipagem pois ela já é automatica.
o useRef serve tambem pra criar um fluxo de dados sem que precise renderizar

13: Criei em pages pasta components com InputLogin.tsx dentro transferi o código pra lá depois importei de volta. Pra tornar o componete dinãmico com TS: cria uma interface  atribui ela a função do componente logo apos a React.FC<>que define as propriedades do componente passa o props como parâmetro.
substituir o state email por props.label e o setEmail por props.onChange, e por ultimo o inputPasswordRef.current.focus() por props .onPressEnter todos esse foram atribuído no bloco interface.
adicionar type? tambem de forma  opcional 

14:Passando useRef dinâmicamente usando o fowardRef: No compoente InputLogin.tsx importar o react envoler a função em parêntese com o React.fowardRef passa o ref como segundo parâmetro depois de props em seguida removo o React.FC<>  e incluo a inteface IInputLoginProps como segundo parâmetro depois de <HTMLInputElement, IInputLoginProps>

15:criei em components  o componente ButtonLogin.tsx e nele transferi <button> depois chamei ele de volta importando <ButtonLogin/> pra passar as propriedades faz a mesmacoisa do Login cria uma interface passa ela ligada ao React.FC<nomeInterface>
passa o props ou o nome dos eventos dentro do objeto({}) fica a critério. OBS: o type tem que associar a :"button"|"submit"|"reset"
pq se não nao funciona.
pra deixa o nome do button dinâmico passar o children sempre dentro da interface  e depois chamar essa interface no React.FC:
EX: interface childrenIterface{ children: React.ReactNode;}
export const Component: React.FC<childrenIterface> = ({children}) 

16:Na pasta contexts criei um file chamado UserLog.tsx que servirá pra mostrar o usuario logado em todas as páginas da aplicação,
inserir de forma estanciada o createContext()
depois crio um componente  export, e no return insiro com a const criada no modelo componente com o value={} obrigatório
criei uma interface passei o objeto useName: string depois chamei a interface no sreateContext e passei um hack no parâmetro para ele para de reclama  de objeto vazio , criei uma interface independente pra o children: React.ReactNode; e passei ela no React.FC<> da função componente

17:Em seguida em App.tsx eu envolvo o componente de rotas <Rts/> com o componente context <UserLogProvider>

18: Dando seguimento, pra compartilhar o que foi criado: dou export nas const que estancia o createContext, depois em outro compoonete com o Dashboard.tsx e importo essa cont e estancio ela com useContext depois eu chamo essa constante no return <p>{userLogContext.userName}</p> userName que é o objeto atribuído do componente original como o valor 'Victor'
faço o mesmo processo no componente Login importo o modulo useContext, depois importo a const que armazena o createContex no componete pai depois estancio elea em uma const e essa const eu chamo no return<p>{userLogContext.userName}</p> com o objeto declarado no valor ou posso desestruturar :
 const {userName} = useContext(UserLogContext)
  ao inves de assim: 
   const userLogContext = useContext(UserLogContext) e na chamada assim: <p>{userName}</p> ao invez de assim: <p>{userLogContext.userName}</p>

19: Na pasta hooks criei o arquivo UseUserLogged.ts dentro dele criei uma lógica   pra que eu possa importar apenas o hook useUserLogged pra usar o hook useContext depois no index.ts da pasta hook eu dou um export * from './UseUserLogged' depois apliquei o ovo modelo no componente de buttonLogin.tsx apaguei o import de useContext e o import de useLogContext e add o import 
import { useUserLogged } pois ele ja contempla os elementos useCreate e o elementos que tem no componente UserLog.tsx

20: Em UserLog.tsx adicionamos um novo elemento a interface o "logout" o mesmo recebe uma função  void na interface, e no return adicionar o logout ao lado de userName pra o valor de logout cria uma função entanciando o callback e adiciona ela como valor de logout, depois  em Dashboard chamei ela no useContext e atribuiela ao evento onClick no <button> inserir um console.log pra ver se a funçaõ é ativada quando o botão é acionado

21:Resfatorei o component Dashboard.tsx criei um state list , setListvdepois criei uma <ul> e  chamei o {list.map()}retonrando  <li> no typescript deve se atentra a passar parãmetros obrigatorios pra que o codigo reconheça o {list.map((value, index)=> {return <li><{value}/li>})} desse jeito os valores passados no array do useState retornam

22: criei um <input onKeyDown={}/> com uma função dentro do evento essa função criei entanciando um callBack e dentro do callback inserir condicionais pra tratar os dados e inpedir valores repetidos ao inserir valores no input

23:Ainda na criação de lista no arquivo Dashboard.tsx vamos refatorar o código criar primeiramente cria-se uma interface IListItem e chama ela no usestate no lugar de string e remove os valores que estão pre determinados no array insiro na interface title; string e isselected boolean
no lugar de value no .map() crio um novo parâmetro	o listItem e return o ListItem.title no return, refatorei o codigo pra inserir um checkbox na lista inserindo suas condicionais pra que retorne o numero de quadrados com check a cada marcação